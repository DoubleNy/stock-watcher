{"version":3,"sources":["elements/Field/index.tsx","elements/Input/index.tsx","elements/Button/index.tsx","components/SearchForm/index.tsx","screens/Main/index.tsx","App/index.tsx","reportWebVitals.ts","index.tsx"],"names":["Field","props","className","classNames","hasAddons","isGrouped","position","multiline","isNarrow","getClassNames","children","Input","id","isFocused","isExpanded","inputSize","inputClassName","labelContent","inputProps","getInputClassNames","Button","type","name","disabled","onClick","text","SearchForm","placeholder","Main","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAoDeA,EAlCoC,SAACC,GA+BhD,OAAO,qBAAKC,UA9BU,WAClB,IAAIC,EAAa,QA0BjB,OAxBIF,EAAMG,YACND,GAAc,eAGdF,EAAMI,YACNF,GAAc,cAEiB,kBAApBF,EAAMI,YACTJ,EAAMI,UAAUC,SAChBH,GAAU,sBAAmBF,EAAMI,UAAUC,UACtCL,EAAMI,UAAUE,YACvBJ,GAAc,2BAKtBF,EAAMO,WACNL,GAAc,cAGdF,EAAMC,YACNC,GAAU,WAAQF,EAAMC,YAGrBC,EAGYM,GAAhB,SAAkCR,EAAMS,Y,cCEpCC,G,MAtCoC,SAACV,GAAW,IAEvDW,EAQAX,EARAW,GAEAC,GAMAZ,EAPAa,WAOAb,EANAY,WACAE,EAKAd,EALAc,UACAC,EAIAf,EAJAe,eACAC,EAGAhB,EAHAgB,aAEGC,GACHjB,EAFAC,UARsD,YAUtDD,EAVsD,0FA8B1D,OACI,qCACKgB,GAAgB,uBAAOf,UAAU,QAAjB,SAA0Be,IAC3C,mCAAOL,GAAIA,EAAIV,UArBI,WACvB,IAAIC,EAAa,QAcjB,OAZIU,IACAV,GAAc,eAGdY,IACAZ,GAAU,cAAWY,IAGrBC,IACAb,GAAU,WAAQa,IAGfb,EAMuBgB,IAA0BD,SCtBjDE,EAjBsC,SAACnB,GAClD,OACI,yBACIoB,KAAMpB,EAAMoB,KACZC,KAAMrB,EAAMqB,KACZpB,UAAS,iBAAYD,EAAMC,UAAYD,EAAMC,UAAY,IACzDqB,SAAUtB,EAAMsB,SAChBC,QAASvB,EAAMuB,QALnB,UAQKvB,EAAMwB,MAAQxB,EAAMS,SAAW,+BAAOT,EAAMwB,OAAexB,EAAMwB,KAEjExB,EAAMS,aCCJgB,G,MAT8C,SAACzB,GAC1D,OACQ,eAAC,EAAD,CAAOI,WAAS,EAAhB,UACI,cAAC,EAAD,CAAOH,UAAU,eAAea,UAAU,SAASY,YAAY,gCAC/D,cAAC,EAAD,CAAQzB,UAAU,wBAAwBuB,KAAK,gBCFhDG,EANkC,SAAC3B,GAC9C,OAAO,mCACH,cAAC,EAAD,O,MCEO4B,MAJf,WACK,OAAO,cAAC,EAAD,KCMGC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5Bb,M","file":"static/js/main.0c58ae47.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ntype FieldProps = {\r\n    hasAddons?: boolean;\r\n    isGrouped?:\r\n        | boolean\r\n        | {\r\n        position: \"centered\" | \"right\";\r\n        multiline?: never;\r\n    }\r\n        | {\r\n        position?: never;\r\n        multiline: boolean;\r\n    };\r\n    isNarrow?: boolean;\r\n    className?: string;\r\n};\r\n\r\nconst Field: React.FunctionComponent<FieldProps> = (props) => {\r\n    const getClassNames = () => {\r\n        let classNames = \"field\";\r\n\r\n        if (props.hasAddons) {\r\n            classNames += \" has-addons\";\r\n        }\r\n\r\n        if (props.isGrouped) {\r\n            classNames += \" is-grouped\";\r\n\r\n            if (typeof props.isGrouped === \"object\") {\r\n                if (props.isGrouped.position) {\r\n                    classNames += ` is-grouped-${props.isGrouped.position}`;\r\n                } else if (props.isGrouped.multiline) {\r\n                    classNames += \" is-grouped-multiline\";\r\n                }\r\n            }\r\n        }\r\n\r\n        if (props.isNarrow) {\r\n            classNames += \" is-narrow\";\r\n        }\r\n\r\n        if (props.className) {\r\n            classNames += ` ${props.className}`;\r\n        }\r\n\r\n        return classNames;\r\n    };\r\n\r\n    return <div className={getClassNames()}>{props.children}</div>;\r\n};\r\n\r\nexport default Field;\r\n","import React from \"react\";\r\n\r\nimport \"./_input.scss\";\r\n\r\nexport interface InputProps\r\n    extends React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement> {\r\n    labelContent?: string;\r\n    inputSize?: \"small\" | \"medium\" | \"large\";\r\n    inputClassName?: string;\r\n    isExpanded?: boolean;\r\n    isFocused?: boolean;\r\n}\r\n\r\nconst Input: React.FunctionComponent<InputProps> = (props) => {\r\n    const {\r\n        id,\r\n        isExpanded,\r\n        isFocused,\r\n        inputSize,\r\n        inputClassName,\r\n        labelContent,\r\n        className,\r\n        ...inputProps\r\n    } = props;\r\n\r\n    const getInputClassNames = () => {\r\n        let classNames = \"input\";\r\n\r\n        if (isFocused) {\r\n            classNames += \" is-focused\";\r\n        }\r\n\r\n        if (inputSize) {\r\n            classNames += ` is-${inputSize}`;\r\n        }\r\n\r\n        if (inputClassName) {\r\n            classNames += ` ${inputClassName}`;\r\n        }\r\n\r\n        return classNames;\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {labelContent && <label className=\"label\">{labelContent}</label>}\r\n            <input id={id} className={getInputClassNames()} {...inputProps} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\n\r\ninterface ButtonProps\r\n    extends React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement> {\r\n    text?: string;\r\n}\r\n\r\nconst Button: React.FunctionComponent<ButtonProps> = (props) => {\r\n    return (\r\n        <button\r\n            type={props.type}\r\n            name={props.name}\r\n            className={`button ${props.className ? props.className : \"\"}`}\r\n            disabled={props.disabled}\r\n            onClick={props.onClick}\r\n        >\r\n\r\n            {props.text && props.children ? <span>{props.text}</span> : props.text}\r\n\r\n            {props.children}\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default Button;\r\n","import React  from \"react\";\r\n\r\nimport Field from \"elements/Field\";\r\nimport Input from \"elements/Input\";\r\nimport Button from \"elements/Button\";\r\n\r\nimport \"./_index.scss\";\r\n\r\nexport type SearchFormProps = {\r\n};\r\n\r\nconst SearchForm: React.FunctionComponent<SearchFormProps> = (props) => {\r\n    return (\r\n            <Field isGrouped>\r\n                <Input className=\"search-input\" inputSize=\"medium\" placeholder=\"Type ticker or company name\"/>\r\n                <Button className=\"is-info search-button\" text=\"Search\"/>\r\n            </Field>\r\n    );\r\n};\r\n\r\nexport default SearchForm;\r\n","import React  from \"react\";\r\n\r\nimport SearchForm from \"components/SearchForm\";\r\n\r\nexport type MainProps = {\r\n};\r\n\r\nconst Main: React.FunctionComponent<MainProps> = (props) => {\r\n    return <>\r\n        <SearchForm/>\r\n    </>\r\n};\r\n\r\nexport default Main;\r\n","import React from 'react';\n\nimport Main from \"../screens/Main\";\n\nimport './_index.scss';\n\n\nfunction App() {\n     return <Main/>\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}