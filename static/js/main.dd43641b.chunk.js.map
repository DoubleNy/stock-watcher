{"version":3,"sources":["communication/protocols/http/utils.ts","elements/Field/index.tsx","elements/Button/index.tsx","elements/Input/index.tsx","elements/Suggestions/index.tsx","elements/InputWithSuggestions/index.tsx","communication/protocols/http/request.ts","commonlib/utils.tsx","components/SearchForm/index.tsx","elements/Message/index.tsx","components/Chart/index.tsx","components/DatePicker/index.tsx","elements/Toggle/index.tsx","screens/Main/index.tsx","App/index.tsx","reportWebVitals.ts","index.tsx"],"names":["HttpMethod","Field","props","className","classNames","hasAddons","isGrouped","position","multiline","isNarrow","getClassNames","children","Button","type","name","isLoading","disabled","onClick","text","Input","id","inputClassName","inputProps","getInputClassNames","autoComplete","Suggestions","suggestions","map","suggestion","index","onSelection","InputWithSuggestions","timeoutId","handleSelect","value","onChoose","slice","indexOf","length","setState","clearTimeout","handleChange","event","newValue","target","onChange","setTimeout","a","getSuggestions","newSuggestions","console","error","isValueFromSuggestions","lowerCaseValue","state","toLowerCase","undefined","this","onSelect","React","Component","sendHttpRequest","axios","create","httpRequest","request","Promise","resolve","reject","then","response","catch","API_KEY","getAlphaVantageUrl","getSearchSugesstions","trimName","startIdx","SearchForm","useState","setValue","handleGetSuggestions","method","GET","url","data","match","symbol","placeholder","onSearch","Message","getMessageClasses","header","body","Chart","mean","setMean","useEffect","items","sum","reduce","prev","next","open","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","tick","fontSize","tickFormatter","date","moment","format","stroke","showAverage","y","defaultRange","startDate","Date","endDate","dateRangeKey","key","RangeDatePicker","initialRange","range","setRange","today","maxDate","ranges","selection","onChangeRange","Toggle","isRounded","getToggleClasses","onToggle","checked","htmlFor","Main","allItems","setAllItems","filteredItems","setFilteredItems","setIsLoading","setShowAverage","handleUpdateRange","subtract","toDate","getInitialRange","filter","el","handleSearch","status","time_series","Object","keys","forEach","entry","entries","stringValue","push","reverse","log","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dd43641b.chunk.js","sourcesContent":["export enum HttpMethod {\r\n    GET = \"GET\",\r\n    POST = \"POST\",\r\n    PATCH = \"PATCH\",\r\n    DELETE = \"DELETE\",\r\n    PUT = \"PUT\",\r\n}","import React from \"react\";\r\n\r\ntype FieldProps = {\r\n    hasAddons?: boolean;\r\n    isGrouped?:\r\n        | boolean\r\n        | {\r\n        position: \"centered\" | \"right\";\r\n        multiline?: never;\r\n    }\r\n        | {\r\n        position?: never;\r\n        multiline: boolean;\r\n    };\r\n    isNarrow?: boolean;\r\n    className?: string;\r\n};\r\n\r\nconst Field: React.FunctionComponent<FieldProps> = (props) => {\r\n    const getClassNames = () => {\r\n        let classNames = \"field\";\r\n\r\n        if (props.hasAddons) {\r\n            classNames += \" has-addons\";\r\n        }\r\n\r\n        if (props.isGrouped) {\r\n            classNames += \" is-grouped\";\r\n\r\n            if (typeof props.isGrouped === \"object\") {\r\n                if (props.isGrouped.position) {\r\n                    classNames += ` is-grouped-${props.isGrouped.position}`;\r\n                } else if (props.isGrouped.multiline) {\r\n                    classNames += \" is-grouped-multiline\";\r\n                }\r\n            }\r\n        }\r\n\r\n        if (props.isNarrow) {\r\n            classNames += \" is-narrow\";\r\n        }\r\n\r\n        if (props.className) {\r\n            classNames += ` ${props.className}`;\r\n        }\r\n\r\n        return classNames;\r\n    };\r\n\r\n    return <div className={getClassNames()}>{props.children}</div>;\r\n};\r\n\r\nexport default Field;\r\n","import React from \"react\";\r\n\r\ninterface ButtonProps\r\n    extends React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement> {\r\n    text?: string;\r\n    isLoading?: boolean;\r\n}\r\n\r\nconst Button: React.FunctionComponent<ButtonProps> = (props) => {\r\n    return (\r\n        <button\r\n            type={props.type}\r\n            name={props.name}\r\n            className={`button ${props.className ? props.className : \"\"} ${props.isLoading ? \"is-loading\" : \"\"}`}\r\n            disabled={props.disabled || props.isLoading}\r\n            onClick={props.onClick}\r\n        >\r\n\r\n            {props.text && props.children ? <span>{props.text}</span> : props.text}\r\n\r\n            {props.children}\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\n\r\nimport \"./_index.scss\";\r\n\r\nexport interface InputProps\r\n    extends React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement> {\r\n    inputClassName?: string;\r\n}\r\n\r\nconst Input: React.FunctionComponent<InputProps> = (props) => {\r\n    const {\r\n        id,\r\n        inputClassName,\r\n        className,\r\n        ...inputProps\r\n    } = props;\r\n\r\n    const getInputClassNames = () => {\r\n        let classNames = \"input \";\r\n\r\n        if (inputClassName) {\r\n            classNames += ` ${inputClassName}`;\r\n        }\r\n\r\n        return classNames;\r\n    };\r\n\r\n    return <input id={id} className={getInputClassNames()} autoComplete={\"off\"} {...inputProps} />\r\n\r\n};\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\n\r\nimport {StringMap} from \"commonlib/utils\";\r\n\r\nimport \"./_index.scss\";\r\n\r\ntype SuggestionsProps = {\r\n  suggestions: StringMap[];\r\n  onSelection: (value: string) => void;\r\n};\r\n\r\nconst Suggestions: React.FunctionComponent<SuggestionsProps> = (props) => {\r\n  const { suggestions } = props;\r\n  return (\r\n    <ul className=\"box suggestions\">\r\n      {suggestions.map((suggestion, index) => (\r\n        <li key={index} className=\"suggestion\" onClick={() => props.onSelection(suggestion['symbol'])}>\r\n          <span className=\"suggestion--symbol\"> {suggestion['symbol']} </span> <span className=\"suggestion--name\">{suggestion['name']}</span>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Suggestions;\r\n","import React from \"react\";\r\nimport { MarkRequired } from \"ts-essentials\";\r\n\r\nimport Input, { InputProps } from \"elements/Input\";\r\nimport Suggestions from \"elements/Suggestions\";\r\n\r\nimport {StringMap} from \"commonlib/utils\";\r\n\r\ntype BaseInputProps = Omit<MarkRequired<InputProps, \"id\">, \"type\" | \"value\">;\r\n\r\ntype WithSuggestions = {\r\n  getSuggestions: (prefix: string) => Promise<StringMap[]>;\r\n};\r\n\r\ntype CustomInputWithSuggestionsProps = {\r\n  onChoose: (value: string) => void;\r\n  value?: string;\r\n} & WithSuggestions;\r\n\r\ntype InputWithSuggestionsProps = BaseInputProps & CustomInputWithSuggestionsProps;\r\n\r\ntype InputWithSuggestionsState = {\r\n  suggestions: StringMap[];\r\n  value: string;\r\n  isLoading: boolean;\r\n};\r\n\r\nclass InputWithSuggestions extends React.Component<InputWithSuggestionsProps, InputWithSuggestionsState> {\r\n  private timeoutId: NodeJS.Timeout | undefined;\r\n\r\n  constructor(props: InputWithSuggestionsProps) {\r\n    super(props);\r\n\r\n    this.timeoutId = undefined;\r\n\r\n    this.state = {\r\n      suggestions: [],\r\n      value: \"\",\r\n      isLoading: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.value) {\r\n      this.setState({ ...this.state, value: this.props.value });\r\n    }\r\n  }\r\n\r\n\r\n  handleSelect = (value: string) => {\r\n    this.props.onChoose(value.slice(value.indexOf(\"$\") + 1, value.length));\r\n\r\n    this.setState({ value, suggestions: [] });\r\n\r\n    clearTimeout(this.timeoutId as number | undefined);\r\n  };\r\n\r\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    clearTimeout(this.timeoutId as number | undefined);\r\n\r\n    const { value: newValue } = event.target;\r\n    this.setState({ value: newValue, suggestions: [] });\r\n\r\n    if (this.props.onChange) {\r\n      this.props.onChange(event);\r\n    }\r\n\r\n    if (newValue) {\r\n      this.setState({ isLoading: true });\r\n\r\n      const timeoutId = setTimeout(async () => {\r\n        try {\r\n          const newSuggestions = await this.getSuggestions(newValue);\r\n\r\n          if (this.timeoutId === timeoutId && newSuggestions) {\r\n            this.setState({ suggestions: newSuggestions, isLoading: false });\r\n          }\r\n        } catch (err) {\r\n          console.error(err);\r\n        }\r\n      }, 700);\r\n\r\n      this.timeoutId = timeoutId;\r\n    }\r\n  };\r\n\r\n  async getSuggestions(value: string)  {\r\n    if (this.props.getSuggestions) {\r\n      return await this.props.getSuggestions(value);\r\n    }\r\n  }\r\n\r\n  isValueFromSuggestions = () => {\r\n    const { value } = this.state;\r\n\r\n    const lowerCaseValue = value.toLowerCase();\r\n\r\n    for (const suggestion of this.state.suggestions) {\r\n      if (suggestion['symbol'].toLowerCase() === lowerCaseValue) return true;\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  render() {\r\n    const { props, state } = this;\r\n    const { onChange, onSelect, getSuggestions, onChoose, className, ...inputProps } = props;\r\n\r\n    return (\r\n        <div className=\"suggestions--container is-relative\">\r\n          <Input\r\n              type=\"text\"\r\n              value={state.value}\r\n              onChange={this.handleChange}\r\n              className={`${className || \"\"}${state.isLoading ? ` is-loading` : \"\"}`}\r\n              {...inputProps}\r\n          />\r\n          <Suggestions suggestions={state.suggestions} onSelection={this.handleSelect} />\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputWithSuggestions;\r\n","import axios, { AxiosRequestConfig, AxiosResponse } from \"axios\";\r\n\r\nexport type HttpResponse<T> = {\r\n  data: T;\r\n  status: number;\r\n};\r\n\r\nconst sendHttpRequest = axios.create();\r\n\r\nconst httpRequest = async (request: AxiosRequestConfig) => {\r\n  return new Promise((resolve: (response: AxiosResponse) => void, reject) => {\r\n    sendHttpRequest(request)\r\n      .then((response) => {\r\n        resolve(response);\r\n      })\r\n      .catch((error) => {\r\n        if (error.response) {\r\n          resolve(error.response);\r\n        } else {\r\n          reject(error);\r\n        }\r\n      });\r\n  });\r\n};\r\n\r\nexport default httpRequest;\r\n","import {Range} from \"components/DatePicker\";\r\n\r\nimport moment from \"moment\";\r\n\r\nconst DEFAULT_RANGE_IN_YEARS = 1;\r\n\r\nconst API_KEY: string = \"TCVWRTR5D693E1AT\";\r\n\r\nexport const defaultDateFormat = \"DD/MM/YYYY\";\r\n\r\nexport const getAlphaVantageUrl = (value: string) =>`https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${value}&outputsize=full&apikey=${API_KEY}`;\r\nexport const getSearchSugesstions = (value: string) =>`https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=${value}&apikey=${API_KEY}`;\r\n\r\nexport const getInitialRange = () : Range => {\r\n    const today: Date = new Date();\r\n\r\n    return {\r\n        startDate: moment(today).subtract(DEFAULT_RANGE_IN_YEARS, \"year\").toDate(),\r\n        endDate: today,\r\n    };\r\n}\r\n\r\nexport const trimName = (name: string) => {\r\n    const startIdx = name.indexOf(\" \") + 1;\r\n    return name.slice(startIdx);\r\n}\r\nexport type StringMap = {\r\n    [key: string]: string;\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\n\r\nimport Field from \"elements/Field\";\r\nimport Button from \"elements/Button\";\r\nimport InputWithSuggestions from \"elements/InputWithSuggestions\";\r\n\r\nimport httpRequest, {HttpResponse} from \"communication/protocols/http/request\";\r\nimport {getSearchSugesstions, StringMap} from \"commonlib/utils\";\r\nimport {HttpMethod} from \"communication/protocols/http/utils\";\r\n\r\nimport \"./_index.scss\";\r\n\r\nexport type SearchFormProps = {\r\n    onSearch: (value: string) => void;\r\n    isLoading?: boolean;\r\n};\r\n\r\nconst MAX_SUGGESTIONS = 5;\r\n\r\nconst SearchForm: React.FunctionComponent<SearchFormProps> = (props) => {\r\n    const [value, setValue] = useState<string>();\r\n\r\n    const handleOnChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(event.target.value);\r\n    }\r\n\r\n    const handleOnClick = () => {\r\n        props.onSearch && value && props.onSearch(value);\r\n    }\r\n\r\n    const handleGetSuggestions = async (value: string): Promise<StringMap[]> => {\r\n        const {data}: HttpResponse<any> = await httpRequest({method: HttpMethod.GET, url: getSearchSugesstions(value)});\r\n\r\n        return data['bestMatches'].slice(0, MAX_SUGGESTIONS).map((match: StringMap) => ({\r\n            symbol: match['1. symbol'],\r\n            name: match['2. name']\r\n        })) ?? [];\r\n    }\r\n\r\n    return (\r\n        <Field isGrouped className=\"search--form\">\r\n            <InputWithSuggestions\r\n                placeholder=\"Type ticker or company name\"\r\n                inputClassName=\"search--form__search--input is-info\"\r\n                id=\"test\"\r\n                onChange={handleOnChange}\r\n                onChoose={(value: string) => setValue(value)}\r\n                getSuggestions={handleGetSuggestions}\r\n            />\r\n            <Button className=\"is-info search--form__search--button\" text=\"Search\" onClick={handleOnClick}\r\n                    disabled={!value} isLoading={props.isLoading}/>\r\n        </Field>\r\n    );\r\n};\r\n\r\nexport default SearchForm;\r\n","import React from \"react\";\r\n\r\nexport type MessageProps = {\r\n    type?: \"is-warning\" | \"is-dark\";\r\n    header?: string;\r\n    body?: string;\r\n    classNames?: string;\r\n}\r\n\r\nconst Message: React.FunctionComponent<MessageProps> = (props) => {\r\n    const getMessageClasses = () => {\r\n        let classNames = \"message \";\r\n\r\n        if (props.type) classNames += props.type;\r\n\r\n        if (props.classNames) classNames += \" \" + props.classNames;\r\n\r\n        return classNames;\r\n    };\r\n\r\n    return <article className={getMessageClasses()}>\r\n                <div className=\"message-header\">\r\n                    <p>{props.header}</p>\r\n                </div>\r\n                <div className=\"message-body\">\r\n                    {props.body}\r\n                </div>\r\n            </article>\r\n};\r\n\r\nexport default Message;\r\n","import React, {useEffect, useState} from 'react';\r\n\r\nimport {CartesianGrid, Line, LineChart, ReferenceLine, ResponsiveContainer, Tooltip, XAxis, YAxis} from 'recharts';\r\nimport moment from \"moment\";\r\nimport Message from \"elements/Message\";\r\n\r\nimport {defaultDateFormat} from \"commonlib/utils\";\r\n\r\nimport \"./_index.scss\";\r\n\r\nexport type Item = {\r\n    [name: string]: number | string;\r\n}\r\n\r\nexport type ChartProps = {\r\n    classNames?: string;\r\n    items?: Item[];\r\n    showAverage?: boolean;\r\n}\r\n\r\n\r\nconst Chart: React.FunctionComponent<ChartProps> = (props) => {\r\n    const [mean, setMean] = useState<number>(0);\r\n\r\n    useEffect(() => {\r\n        if (props.items) {\r\n            const sum = props.items.reduce((prev, next) => prev + +next.open, 0)\r\n            setMean(sum / props.items.length);\r\n        }\r\n    }, [props.items])\r\n\r\n    return <ResponsiveContainer className={props.classNames ?? props.classNames} width=\"60%\"\r\n                                    height={500}>\r\n        {props.items && props.items.length > 0 ?\r\n            <LineChart\r\n                data={props.items}\r\n                margin={{\r\n                    top: 5, right: 30, left: 20, bottom: 5,\r\n                }}\r\n            >\r\n                <CartesianGrid strokeDasharray=\"3 3\"/>\r\n                <XAxis dataKey=\"date\" tick={{fontSize: 12}}\r\n                       tickFormatter={(date) => moment(date).format(defaultDateFormat)}/>\r\n                <YAxis tick={{fontSize: 12}} tickFormatter={(value) => \"$\" + value}/>\r\n                <Tooltip/>\r\n                <Line type=\"monotone\" dataKey=\"open\" stroke=\"#0099ff\"/>\r\n                {props.showAverage && <ReferenceLine y={mean} stroke=\"#ff8533\" strokeDasharray=\"10\"/>}\r\n            </LineChart> : <Message type=\"is-dark\" header=\"No loaded data\"\r\n                                                                         body=\"Search for a stock and select date range to display data\"/>\r\n            }\r\n    </ResponsiveContainer>\r\n}\r\n\r\nexport default Chart;","import React, {useEffect, useState} from 'react';\r\nimport {DateRangePicker} from 'react-date-range';\r\n\r\nimport 'react-date-range/dist/styles.css';\r\nimport 'react-date-range/dist/theme/default.css';\r\n\r\ntype RangeDatePickerProps = {\r\n    onChangeRange: (range: Range) => void;\r\n    initialRange?: Range;\r\n}\r\n\r\nexport type Range = {\r\n    startDate?: Date;\r\n    endDate?: Date;\r\n    key?: string;\r\n}\r\n\r\nconst defaultRange = {\r\n    startDate: new Date(),\r\n    endDate: new Date(),\r\n}\r\n\r\nconst dateRangeKey = {\r\n    key: 'selection'\r\n}\r\n\r\nconst RangeDatePicker: React.FunctionComponent<RangeDatePickerProps> = (props) => {\r\n    const [range, setRange] = useState<Range>(props.initialRange ? {...props.initialRange, ...dateRangeKey} : {...defaultRange, ...dateRangeKey});\r\n    const [today] = useState(new Date());\r\n\r\n    useEffect(() => {\r\n\r\n        const range: Range = {...props.initialRange, ...dateRangeKey};\r\n\r\n        setRange(range);\r\n\r\n    }, [props.initialRange])\r\n\r\n\r\n    const handleSelect = (ranges: any) => {\r\n        setRange(ranges.selection);\r\n        props.onChangeRange(ranges.selection);\r\n    }\r\n\r\n    return (\r\n        <DateRangePicker\r\n            maxDate={today}\r\n            ranges={[range]}\r\n            onChange={handleSelect}\r\n        />\r\n    )\r\n}\r\n\r\nexport default RangeDatePicker;","import React, {ChangeEvent} from \"react\";\r\n\r\nimport Field from \"elements/Field\";\r\n\r\nexport type ToggleProps = {\r\n    isRounded?: boolean;\r\n    type?: \"is-info\";\r\n    classNames?: string;\r\n    onToggle?: (value: boolean) => void;\r\n}\r\n\r\nconst Toggle: React.FunctionComponent<ToggleProps> = (props) => {\r\n    const getToggleClasses = () => {\r\n        let classNames = \"switch \";\r\n\r\n        if (props.isRounded) classNames += \"is-rounded\";\r\n\r\n        if (props.type) classNames += \" \" + props.type;\r\n\r\n        return classNames;\r\n    };\r\n\r\n    const handleOnChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        props.onToggle && props.onToggle(event.target.checked);\r\n    }\r\n\r\n    return (\r\n        <Field className={props.classNames ?? props.classNames}>\r\n            <input type=\"checkbox\" id=\"switch\" className={getToggleClasses()} onChange={handleOnChange}/>\r\n            <label htmlFor=\"switch\">Average price</label>\r\n        </Field>\r\n    );\r\n};\r\n\r\nexport default Toggle;\r\n","import React, {useEffect, useState} from \"react\";\r\n\r\nimport SearchForm from \"components/SearchForm\";\r\nimport Chart, {Item} from \"components/Chart\";\r\nimport RangeDatePicker, {Range} from \"components/DatePicker\";\r\nimport Toggle from \"elements/Toggle\";\r\n\r\nimport httpRequest, {HttpResponse} from \"communication/protocols/http/request\";\r\nimport {getAlphaVantageUrl, getInitialRange, trimName} from \"commonlib/utils\";\r\n\r\nimport \"./_index.scss\";\r\n\r\ntype AlphaVantageResponseDataType = {\r\n    \"Meta Data\": object;\r\n    \"Time Series (Daily)\": {\r\n        [key: string]: string;\r\n        date: string;\r\n    };\r\n}\r\n\r\nexport type MainProps = {};\r\n\r\nconst Main: React.FunctionComponent<MainProps> = (props) => {\r\n    const [allItems, setAllItems] = useState<Item[]>([]);\r\n    const [filteredItems, setFilteredItems] = useState<Item[]>([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [range, setRange] = useState<Range>();\r\n    const [showAverage, setShowAverage] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        handleUpdateRange(range ?? getInitialRange());\r\n        setIsLoading(false);\r\n    }, [allItems])\r\n\r\n    const handleUpdateRange = (range: Range) => {\r\n        const filteredItems = allItems.filter((el) => {\r\n            return new Date(el.date) > range.startDate! && new Date(el.date) < range.endDate!\r\n        })\r\n\r\n        setRange(range);\r\n        setFilteredItems(filteredItems);\r\n    }\r\n\r\n    const handleDisplayAverage = (value: boolean) => {\r\n        setShowAverage(value);\r\n    }\r\n\r\n    const handleSearch = async (value: string) => {\r\n        setTimeout(() => {\r\n            setIsLoading(false);\r\n        }, 10000);\r\n\r\n        setIsLoading(true);\r\n\r\n        const {data, status}: HttpResponse<AlphaVantageResponseDataType> = await httpRequest({\r\n            method: \"GET\",\r\n            url: getAlphaVantageUrl(value)\r\n        });\r\n        const allItems: Item[] = [];\r\n\r\n        const time_series = data[\"Time Series (Daily)\"];\r\n\r\n        if (status === 200 && time_series) {\r\n            Object.keys(time_series).forEach((date: string) => {\r\n                let entry: Item = {\r\n                    date,\r\n                }\r\n\r\n                Object.entries(time_series[date]).forEach(function ([name, value]) {\r\n                    const stringValue: string = value as string;\r\n                    entry = {...entry, [trimName(name)]: +stringValue}\r\n                })\r\n                allItems.push(entry)\r\n            })\r\n\r\n            setAllItems(allItems.reverse());\r\n        } else {\r\n            console.log(\"API CALL ERROR\");\r\n            console.log(\"Status: \" + status);\r\n            console.log(data);\r\n        }\r\n    };\r\n\r\n    return <>\r\n        <SearchForm onSearch={handleSearch} isLoading={isLoading}/>\r\n        <div className={\"main--container\"}>\r\n            <Chart classNames={\"main--container__chart\"} items={filteredItems} showAverage={showAverage}/>\r\n            <div className=\"main--container__configurations\">\r\n                <RangeDatePicker onChangeRange={handleUpdateRange} initialRange={range}/>\r\n                <Toggle classNames=\"average--price\" type=\"is-info\" onToggle={handleDisplayAverage} isRounded/>\r\n            </div>\r\n        </div>\r\n    </>\r\n};\r\n\r\nexport default Main;\r\n","import React from 'react';\n\nimport Main from \"../screens/Main\";\n\nimport './_index.scss';\n\n\nfunction App() {\n     return <Main/>\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}